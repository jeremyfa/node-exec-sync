// Generated by CoffeeScript 1.3.3
(function() {
  var FFI, fs, getOutput, libc, tmpDir, uniqId, uniqIdK, platforms;

  FFI = require("ffi");


  fs = require("fs");
  
  exec = new {
    win32: function Win32Platform() {
      var lib = new FFI.Library("./lib/proc", {
        run: ['int', ['string', 'string']]
      });
      this.exec = function (cmd, tmpFilePath) {
        return lib.run(cmd, tmpFilePath);
      };
    },
    linux: function LinuxPlatform() {
      var lib = new FFI.Library(null, {
        "system": ["int32", ["string"]]
      });
      this.exec = function (cmd, tmpFilePath) {
        return lib.system(cmd + ">" + tmpFilePath);
      }
    }
  }[process.platform]().exec

  uniqIdK = 0;

  uniqId = function() {
    var prefix;
    prefix = 'tmp';
    return prefix + (new Date()).getTime() + '' + (uniqIdK++) + ('' + Math.random()).split('.').join('');
  };

  tmpDir = function() {
    var dir, name, _i, _len, _ref;
    _ref = ['TMPDIR', 'TMP', 'TEMP'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (process.env[name] != null) {
        dir = process.env[name];
        if (dir.charAt(dir.length - 1) === '/') {
          return dir.substr(0, dir.length - 1);
        }
        return dir;
      }
    }
    return '/tmp';
  };

  getOutput = function(path) {
    var output;
    output = fs.readFileSync(path);
    fs.unlinkSync(path);
    output = "" + output;
    if (output.charAt(output.length - 1) === "\n") {
      output = output.substr(0, output.length - 1);
    }
    return output;
  };

  module.exports = function(cmd, returnOutAndErr) {
    var error, id, result, stdout, tmpFilePath;
    if (returnOutAndErr == null) {
      returnOutAndErr = false;
    }
    id = uniqId();
    stdout = id + '.stdout';
    tmpFilePath = tmpDir() + "/" + stdout;
    if(exec(cmd, tmpFilePath)) {
      throw new Error("Process ends with not null error code");
    }
    return fs.readFileSync(tmpFilePath).toString().replace(/(\n|\r)+$/g,'');
  };

}).call(this);
